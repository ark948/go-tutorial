Starting to learn golang.


following the tutorial on the official website (go.dev)


1. Get started with Go

    (I already have installed Go compiler)

    - create a new folder called 'hello':
    > mkdir hello
    > cd hello


    - Enable dependency tracking for your code:
    a go.mod file tracks the modules provided by others (probably similar concept to package.json).
    should be include in the repository.

    to create this file:
    > go mod init example/hello (yes, the tutorial was inside hello directory)

    - create a hello.go file (did not exactly say where, i'm assuming in hello directory)
    in this file:
    a main package is declared. all files in the same directory belong to it.
    fmt package is imported. it contains functions to work with text. part of standard library of Go.
    a main function is declared. when the main package is ran, the main function will be executed by default. # IMPORTANT

    - to run the code:
    > go run .


    Calling external packages:
    they can be found at: pkg.go.dev

    we'll import this 'rsc.io/quote' module and use it in hello.go:
    (upon saving, vscode moved the import statement of this module next to the fmt import statement, it coupled them together)

    - run the following command to aquire the modules (Go will do something called Authenticating the modules)
    > go mod tidy (looks like Go downloads these modules)
    a go.sum file is generated.

    - now run the code:
    > go run .

    Don't communicate by sharing memory, share memory by communicating. (this message was printed)


2. Create a Go module

    In this tutorial, we'll create two modules, the first will be imported by the other one. the second is a caller which will use the first.

    Go code is grouped into packages, and packages are grouped into modules.

    - create a greetings directory
    > mkdir greetings
    > cd greetings

    - create a new module by using go mod init command,
    If you publish a module, this must be a path from which your module can be downloaded by Go tools. IMPORTANT
    > go mod init example.com/greetings

    go mod init will create a go.mod file, this file keeps the track of dependencies of your code.
    so far, it only includes the name of your module, and the Go version.

    the name of this package is greetings, in it, there will be a function named Hello, that will return a string
    In Go, the := operator is a shortcut for declaring and initializing a variable in one line:

        message := fmt.Sprintf("Hi, %v. Welcome!", name)

    Taking the long way, you might have written this as:

        var message string
        message = fmt.Sprintf("Hi, %v. Welcome!", name)

    Use the fmt package's Sprintf function to create a greeting message.
    (basically a formatted string)

3. Call your code from another module

    Moved greetings folder to a new top-level folder, "using-go-modules"
    > cd "using-go-modules"
    > mkdir hello
    > cd hello

    > go mod init example.com/hello

    - in hello folder, create a hello.go file, in this file we'll call the Hello function from the greetings module

    For production use, youâ€™d publish the example.com/greetings module from its repository (with a module path that reflected its published location), where Go tools could find it to download it. For now, because you haven't published the module yet, you need to adapt the example.com/hello module so it can find the example.com/greetings code on your local file system.

    To do that, use the go mod edit command to edit the example.com/hello module to redirect Go tools from its module path (where the module isn't) to the local directory (where it is).

    > go mod edit -replace example.com/greetings=../greetings
    (the go.mod file in hello dir, must be now include a replace directive)

    - now run go mod tidy command to synchronize
    > go mod tidy

    - finally run the code (you must be in hello dir)
    > go run .


4. Return and handle an error

    In this part, we will throw some errors in greetings module, and then will handle them in caller module (hello)

    in the greetings, we declared a Hello function, that can return either a string, or an error
    in hello, we call the Hello from greetings, (with an empty string as input)
    And capture both possible return values of this function. (Yes both)
    The error will be raised, we'll log it, and then exit.
    (Do not forget to configure the go.mod to use local file system, before running the program)
    (in hello dir)
    > go mod edit -replace example.com/greetings=../greetings
    > go mod tidy

    the result should be exit status 1

    That's common error handling in Go: Return an error as a value so the caller can check for it. IMPORTANT

    (I tried providing a name, and the program ran with no problems)


5. Return a random greeting
    
    In this part, instead of returning a single message every time, we'll return one of several predefined messages.
    (this part, will update "error-handling" folder)

    we'll use something called a Go slice. (it's like an array)

    we'll add a new function to greetings.go called randomFormat.
    Note that this function starts with a lowercase letter, making it accesible only to its own package (it is not exported). IMPORTANT

    inside randomFormat, we declared a slice, by not specifying a size (empty bracket), we'll tell Go that the size of this slice is dynamic.
    (it can change.)

    run the code multiple times, to see that it changes every time.


6. Return greetings for multiple people

    In this part, we'll handle multiple-value inputs, and multiple-value output.
    (again, will update "error-handling" folder)

    There is something to note, by changing the parameter of Hello function, the function's signature will change.
    and if others have written code, that depends on this module, this will break their program.

    So instead, we'll write a new function.

    
7. Add a test

    In this part, we'll add some tests.
    add a file to greetings dir, named greetings_test.go (in error-handling directory)
    it must be called <fileName>_test.go (must follow the naming convention)

    in order for the go test command to be able to find the tests, test functions must follow the naming convention as well.
    example: Test<FunctionName>()

    to run the test:
    > go test

    to run the tests with more verbosity, run:
    > go test -v



8. Compile and install the application

    This part, will introduce some additional commands for building code.
    - navigate to hello directory (in error-handling) and the run the following command to build exe file (to compile):
    > go build

    - the following command will print the full path of the compiled program:
    > go list -f '{{.Target}}'

    (apparently by installing the program, it can be ran from anywhere in the command line)
    (i will skip the install part, seems unnecessary for now)


----------------------------------------------------------------------------------------------------------
Tutorial: Getting started with multi-module workspaces

    In this part, we'll tell Go that we're writing code multiple modules at the same time.
    (this is basically the definition of Go workspaces, Go workspaces help you manage multiple modules within a single project.)
    (requires Go 1.18 or later)

    - first create a new folder for our workspace
    > mkdir workspace
    > cd workspace

    - create a hello module
    > mkdir hello
    > cd hello
    > go mod init example.com/hello
    (this module will depend on another module called golang.org/x/example)

    - Add a dependency on the golang.org/x/example/hello/reverse package by using go get.
    > go get golang.org/x/example/hello/reverse

    - now create a hello.go file and add the code and run the code
    (result: String is reversed)

    - now it's time to initialize a new workspace:
    - in the workspace dir, run:
    > go work init ./hello
    (a go.work file will be created)
    the first line, says what version of Go, the file must be interpreted with. (the go directive)
    the (use directive) tells Go that the hello module should be the main module when doing a build.

    - now we can run the program in the workspace directory, the result will be like building the hello module itself
    > go run ./hello

    => Download and modify the golang.org/x/example/hello module
    in this part, we'll download a copy of Git repo containing golang.org/x/example/hello module.
    we'll add it to the workspace, and then add a new function.

    - first, clone the repo (from the workspace dir):
    > git clone https://go.googlesource.com/example
    (a new folder called example will be added)
    
    (i added this folder to my gitignore - not exactly sure why)

    - second, add the module to workspace:
    > go work use ./example/hello
    (this will udpate the go.work file)
    (our workspace, now includes both our hello module, and the hello module from example Repo, which reverse resides in)

    - third, we'll add a new function that will reverse a number
    - Create a new file named int.go in the workspace/example/hello/reverse directory.
    
    => Future step (skipped)


----------------------------------------------------------------------------------------------------------
Commands summary:
    - to check the version of installed Go:
    > go version

    - to initialize a module
    > go mod init <example.com/name>

    - to run the code (main function will be executed by default)
    > go run .

    - to aquire dependencies
    > go mod tidy

    - to configure dependencies (not fully introduced yet)
    > go mod edit

    - to run tests (test files and test functions must follow naming convention)
    > go test

    - to run tests with more verbosity:
    > go test -v

    - to create a workspace:
    > go work init ./<theFolderNameOfMainMoudle>
    example: workspace> go work init ./hello

    - to add a dependency:
    > go get <Address to package>
    example: > go get golang.org/x/example/hello/reverse

    - to add a module to workspace:
    > go work use ./<moduleName>
    example: > go work use ./example/hello
